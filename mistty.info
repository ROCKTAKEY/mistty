This is mistty.info, produced by makeinfo version 6.8 from mistty.texi.

     MisTTY 0.9, Sep 15, 2023

     Stephane Zermatten

     Copyright © 2023, Stephane Zermatten

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* mistty: (mistty.info). One line description of project
END-INFO-DIR-ENTRY


   Generated by Sphinx 7.2.6.


File: mistty.info,  Node: Top,  Next: Contents,  Up: (dir)

MisTTY
******

     MisTTY 0.9, Sep 15, 2023

     Stephane Zermatten

     Copyright © 2023, Stephane Zermatten

‘MisTTY’ is a major mode for ‘Emacs’ 29.1 and up that runs a shell
inside of a buffer, similarly to comint mode.  It is built on top of
‘term.el’.  Check out its project page at
‘https://github.com/szermatt/mistty’.

‘M-x mistty’ creates a buffer with an interactive shell.  Inside that
buffer, you can move freely and use the usual Emacs commands and editing
tools to run shell command and work with their output.

In addition to these, you also have access to your shell’s native
command and editing tools, including TAB-completion and autosuggestions.

Commands that take over the *note entire screen: 1, such as ‘less’ or
‘vi’ are also available.

MisTTY‘ is known to work with ‘bash’, ‘zsh’ and ‘fish’ on Linux and
MacOS. It also supports non-shell command-line programs, such as
‘python’.

The latest version of this documentation is available at
‘https://mistty.readthedocs.io/en/latest/’.  Once MisTTY is installed,
this documentation can be accessed from inside Emacs using ‘M-x info
gmistty’

     Note: MisTTY is Beta software!  It might not work with your setup
     our your tools.  If you try it out and encounter issues, please
     take the time to file a bug describing what you did and what
     happened.

* Menu:

* Contents::
* Index::

 — The Detailed Node Listing —

Contents

* Usage::
* Shells::
* Writing Extensions::
* FAQ::
* Contributing::

Usage

* Installation::
* Launching::
* Terminal vs. Scrollback: Terminal vs Scrollback.
* Navigating the scrollback zone::
* Fullscreen Mode::
* Command History::
* Directory tracking and TRAMP::

Shells

* Bash::
* Fish::
* Zsh::

Bash

* Multi-line prompts::
* Directory tracking::
* VI mode::

Fish

* Autosuggestions::
* Command History: Command History<2>.
* Directory tracking: Directory tracking<2>.
* Multi-line prompts: Multi-line prompts<2>.
* VI mode: VI mode<2>.

Zsh

* Autosuggestions: Autosuggestions<2>.
* Directory tracking: Directory tracking<3>.
* Multi-line prompts: Multi-line prompts<3>.
* VI mode: VI mode<3>.

Writing Extensions

* OSC Sequences::
* Writing Your Own Commands::
* Terminal Keymap::

Contributing

* Reporting issues::
* Suggesting features::
* Asking questions::
* Code contributions::
* Documentation contributions::



File: mistty.info,  Node: Contents,  Next: Index,  Prev: Top,  Up: Top

1 Contents
**********

* Menu:

* Usage::
* Shells::
* Writing Extensions::
* FAQ::
* Contributing::


File: mistty.info,  Node: Usage,  Next: Shells,  Up: Contents

1.1 Usage
=========

* Menu:

* Installation::
* Launching::
* Terminal vs. Scrollback: Terminal vs Scrollback.
* Navigating the scrollback zone::
* Fullscreen Mode::
* Command History::
* Directory tracking and TRAMP::


File: mistty.info,  Node: Installation,  Next: Launching,  Up: Usage

1.1.1 Installation
------------------

To use MisTTY, first install its package.

     (package-vc-install "https://github.com/szermatt/mistty")

You can then call it, as described in *note Launching: 8.

However, you’ll likely want to configure it and add some key bindings
you use often in shells, for example:

     (use-package mistty
       :bind (("C-c s" . mistty)

              ;; bind here the shortcuts you'd like the
              ;; shell to handle instead of Emacs.
              :map mistty-prompt-map

              ;; all shells: go up/down in the shell history
              ("C-p" . mistty-send-key)
              ("C-r" . mistty-send-key)

              ;; bash: history-token-search-backward
              ("M-." . mistty-send-key)

              ;; fish: dir history, more history manipulation
              ("M-<up>" . mistty-send-key)
              ("M-<down>" . mistty-send-key)
              ("M-<left>" . mistty-send-key)
              ("M-<right>" . mistty-send-key)))

Read on for details on the commands and key bindings configured above.


File: mistty.info,  Node: Launching,  Next: Terminal vs Scrollback,  Prev: Installation,  Up: Usage

1.1.2 Launching
---------------

To create a new interactive shell buffer in MisTTY mode, call ‘M-x
mistty’ or ‘M-x mistty-create’.  If you use MisTTY regularly, you’ll
want to bind some of these to global shortcuts:

        - ‘M-x mistty-create’ launches a new interactive shell in a
          MisTTY buffer.  The shell that is launched is the one that’s
          configured on ‘M-x configure-option explicit-shell-file-name’

          If ‘explicit-shell-file-name’ is unset, MisTTY falls back to
          ‘shell-file-name’, then the environment variables ‘ESHELL’ and
          ‘SHELL’.

        - ‘M-x mistty-create-other-window’ does the same, but opens the
          buffer in another window.

        - ‘M-x mistty’ also creates a new MisTTY buffer the first time
          it is called.  Afterwards, it’ll to an existing MisTTY buffer
          or creating a new one, trying to guess what’s most
          appropriate.

        - ‘M-x mistty-other-window’ does the same, but opens a buffer in
          another window.


File: mistty.info,  Node: Terminal vs Scrollback,  Next: Navigating the scrollback zone,  Prev: Launching,  Up: Usage

1.1.3 Terminal vs. Scrollback
-----------------------------

MisTTY buffers are split into two zones, with different behaviors:

The ‘terminal zone’, marked by a purple line on the left of the window,
is where you can type command and interact with the terminal.  In this
zone, ‘TAB’ triggers the shell completion, if available.  With some
shells, you’ll see autosuggestions as you type.

The ‘scrollback zone’, is where you can see commands that have been
executed and their output.

The scrollback zone behaves as a normal Emacs buffer.  You can modify it
as you see fit.

The terminal zone, on the other hand, limits what you can do: When a
shell is attached to the terminal, you can edit the command you’re about
to run, but you can’t edit the prompt itself - or rather, if you do
change the prompt, your change will be undone by the shell.

The terminal zone is where the magic happens: this is where you can use
a mix of Emacs and shell key bindings to edit the command line.  The
trickiest part is choosing which key bindings you want Emacs to handle
and which key bindings you want the shell to handle.

By default, Emacs handles everything but a few key bindings are sent
directly to the terminal, bypassing Emacs:

   - ‘RET’, to ask the shell to run the command

   - ‘TAB’, to ask the shell to run command completion,

   - ‘C-a’ to ask it to move the cursor to the beginning of the line,
     and

   - ‘C-e’ to ask it to move the cursor to the end of the line.

   - ‘C-d’ to ask it to either delete the next character or exit the
     program.

In addition, ‘C-c C-c’ sends the TERM signal to the terminal.

The program attached to the terminal decides what the actual effect of
these shortcuts is.  Most shells and command-line editing tools supports
the shortcuts above by default, but they might not work everywhere as
expected.

     Warning: MisTTY will not work if you’ve configured your shell to
     turn on ‘VI mode’ by default.  Please ‘turn it off’ before trying
     out MisTTY, for details on how to turn off VI mode only of MisTTY
     buffers and leave it on otherwise, check out the instructions in
     *note Shells: c. for details.  VI mode must be turned off even if
     you just end up controlling it with VI commands using Evil.

To get the most out of MisTTY, it’s worth it to take the time to
configure it forward the shell key bindings that you actually use to the
terminal and keep everything else behaving as usual for your Emacs
configuration using the following commands:

        - The command ‘mistty-send-key’, called interactively, forwards
          the key it was called from.  It is meant to be bound to the
          shell key bindings you want to work in the terminal zone map,
          ‘mistty-prompt-map’.

          For example, moving up the shell’s command history is usually
          bound to ‘C-p’ and searching in the shell command history to
          ‘C-r’, so if you’d like to access these from a MisTTY buffer,
          you’d do the following:

               (keymap-set mistty-prompt-map "C-p" #'mistty-send-key)
               (keymap-set mistty-prompt-map "C-r" #'mistty-send-key)

          If you’d prefer to have the key available in both the
          scrollback and terminal zones, bind it ‘mistty-mode-map’
          instead.

          You can also pass arbitrary keys to ‘mistty-send-key’, for
          example:

               (defun my-mistty-M-s ()
                 (interactive)
                 (mistty-send-key (kbd "M-s")))
               (keymap-set mistty-prompt-map "C-c a" #'my-mistty-M-s)

        - The command ‘mistty-send-last-key’ forwards the last key
          combination of a sequence it was called from to the terminal.
          For example, ‘C-c C-c’ is bound to ‘mistty-send-last-key’ so
          that the terminal eventually just gets ‘C-c’.

To just try things out, or for shell shortcuts you don’t use regularly,
you can use the ‘C-q’ prefix to bypass Emacs key bindings and send keys
directly to the terminal.  For example, ‘C-q <right>’ sends a right
arrow key press to the terminal instead of moving the cursor.

If that’s not enough,

        - ‘C-c C-q’, ‘M-x mistty-send-key-sequence’ sends all keys you
          press to the terminal until you press ‘C-g’.


File: mistty.info,  Node: Navigating the scrollback zone,  Next: Fullscreen Mode,  Prev: Terminal vs Scrollback,  Up: Usage

1.1.4 Navigating the scrollback zone
------------------------------------

        - ‘C-e C-e’ moves the point back inside the prompt.  This is
          handled by the interactive function
          ‘mistty-end-of-line-or-goto-cursor’

        - ‘M-x mistty-goto-cursor’ also moves the point back inside the
          prompt.  You can bind it to a custom shortcut if you don’t
          like overloading C-e.

        - ‘C-c C-p’ or ‘M-x mistty-goto-previous-output’ goes to the
          beginning of the previous command output.  This is useful to
          if the buffer has scrolled too far and you want to see it from
          the beginning.

        - ‘C-c C-n’ or ‘M-x mistty-goto-next-output’ does the reverse,
          that is, it goes to the next command output.

        - ‘C-c C-r’ or ‘M-x create-buffer-with-output’ creates a new
          buffer containing the last command output.

        - ‘M-x mistty-goto-previous-input’ goes to the beginning of the
          previous command input, that is, the previous prompt.  While
          this is a way of going back the command you’ve previously
          input, it’s best to use the shell native command history, as
          discussed in *note Command History: f.

        - ‘M-x mistty-goto-next-input’ goes to the next command input.


File: mistty.info,  Node: Fullscreen Mode,  Next: Command History,  Prev: Navigating the scrollback zone,  Up: Usage

1.1.5 Fullscreen Mode
---------------------

MisTTY detects when a program such as ‘less’ or ‘vi’ asks to run full
screen and splits the MisTTY buffers into:

   - a terminal buffer, which shows the program output and lets you
     interact with it.  This is a term-mode buffer.

   - a scrollback buffer, which shows the previous command lines and
     their output.

‘C-c C-j’ or ‘M-x mistty-toggle-buffers’ switches between these two.

When the program exits, the two buffers are again merged.  Note that the
output of the full screen app isn’t available in the scrollback.


File: mistty.info,  Node: Command History,  Next: Directory tracking and TRAMP,  Prev: Fullscreen Mode,  Up: Usage

1.1.6 Command History
---------------------

MisTTY doesn’t track command history.  It relies instead on being able
to access the history of the different interactive command-line tools.

The command history available in most shells and command-line editing
tools is available in MisTTY using the following shortcuts:

   - ‘C-q C-p’ moves up command history

   - ‘C-q C-n’ moves down command history

   - ‘C-q C-r’ triggers a backward search in command history

You can shorten these if you bind ‘C-p’, ‘C-n’, or ‘C-r’ to
‘mistty-send-key’ in the terminal zone of the MisTTY buffer.  For
example:

     (keymap-set mistty-prompt-map "C-p" #'mistty-send-key)
     (keymap-set mistty-prompt-map "C-n" #'mistty-send-key)
     (keymap-set mistty-prompt-map "C-r" #'mistty-send-key)


File: mistty.info,  Node: Directory tracking and TRAMP,  Prev: Command History,  Up: Usage

1.1.7 Directory tracking and TRAMP
----------------------------------

In order for Emacs to know your shell’s current directory, the shell has
to tell MisTTY about it.  This is usually done from the prompt.

‘Bash’ does it by default, for local shells, when it detects a terminal
of type ‘TERM=eterm-color’ run from inside Emacs.

Other shells need to be configured to do the same.  For more details,
see *note Shells: c.

If you have configured TRAMP and know that the hosts you ssh into are
accessible with the default TRAMP method, you might consider allowing
MisTTY to report remote paths on ‘M-x configure-option
mistty-allow-tramp-paths’


File: mistty.info,  Node: Shells,  Next: Writing Extensions,  Prev: Usage,  Up: Contents

1.2 Shells
==========

* Menu:

* Bash::
* Fish::
* Zsh::


File: mistty.info,  Node: Bash,  Next: Fish,  Up: Shells

1.2.1 Bash
----------

* Menu:

* Multi-line prompts::
* Directory tracking::
* VI mode::


File: mistty.info,  Node: Multi-line prompts,  Next: Directory tracking,  Up: Bash

1.2.1.1 Multi-line prompts
..........................

When you press ‘RET’ on an incomplete command, ‘bash’ has the annoying
habit of starting a secondary prompt which doesn’t let you go back to
the previous line with the default keybindings.

To work around that, type ‘S-<return>’ instead of ‘RET’ while on the
terminal zone of a MisTTY buffer.  This sends a newline without running
the command.  You’ll then end up with one multi-line prompt that you can
edit normally.

You’ll get the same effect if you yank a multi-line command while in a
prompt or go up the command history to a previous multi-line command.


File: mistty.info,  Node: Directory tracking,  Next: VI mode,  Prev: Multi-line prompts,  Up: Bash

1.2.1.2 Directory tracking
..........................

Recent versions of ‘bash’ already send the current directory when they
detects that it’s called from Emacs with ‘TERM=eterm-color’, so as long
as you don’t want TRAMP remote paths, you don’t have to do anything.

If you do want to use TRAMP remote paths, extend your prompt to send out
an OSC7 sequence to have ‘bash’ send the current directory and hostname
to MisTTY.

To do that, you might add the following to ‘~/.bashrc’:

     if [ "$TERM" = "eterm-color" ]; then
       PS1='\e]7;file://$HOSTNAME$PWD\e\\\\'$PS1
     fi

Such sequence are either ignored or understood by most terminals, so you
don’t absolutely need to check TERM.


File: mistty.info,  Node: VI mode,  Prev: Directory tracking,  Up: Bash

1.2.1.3 VI mode
...............

To communicate with ‘bash’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but MisTTY, you can add
something like the following into ‘~/.inputrc’:

     $if term=eterm
       set editing-mode emacs
     $else
       set editing-mode vi
     $endif

Or, in bash ‘~/.bashrc’:

     if [ "$TERM" != "eterm-color" ]; then
       set -o vi
     fi


File: mistty.info,  Node: Fish,  Next: Zsh,  Prev: Bash,  Up: Shells

1.2.2 Fish
----------

* Menu:

* Autosuggestions::
* Command History: Command History<2>.
* Directory tracking: Directory tracking<2>.
* Multi-line prompts: Multi-line prompts<2>.
* VI mode: VI mode<2>.


File: mistty.info,  Node: Autosuggestions,  Next: Command History<2>,  Up: Fish

1.2.2.1 Autosuggestions
.......................

‘fish’ autosuggestions work normally in MisTTY. However, the usual way
of accepting an autosuggestion, pressing the right arrow key, is very
inconvenient as this is bound to an Emacs point movement.

The recommended way of accepting an autosuggestion in MisTTY is to type
‘C-e’.  This works in normal terminals as well.


File: mistty.info,  Node: Command History<2>,  Next: Directory tracking<2>,  Prev: Autosuggestions,  Up: Fish

1.2.2.2 Command History
.......................

To make full use of ‘fish’ command history, you’ll want to forward some
additional shortcuts to fish:

     (keymap-set mistty-prompt-map "C-p" #'mistty-send-key)
     (keymap-set mistty-prompt-map "C-n" #'mistty-send-key)
     (keymap-set mistty-prompt-map "C-r" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<up>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<down>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<left>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<right>" #'mistty-send-key)

This can also be done by calling ‘use-package’ as shown in *note
Installation: 7.

When in reverse history search mode, ‘fish’ enters a mode that lets you
select an option using the arrow keys.  You can use ‘C-q <up>’ ‘C-q
<down>’ ‘C-q <left>’ ‘C-q <right>’ to send arrow keys directly to ‘fish’
or ‘C-c C-q’ to temporarily send all send key presses to ‘fish’.


File: mistty.info,  Node: Directory tracking<2>,  Next: Multi-line prompts<2>,  Prev: Command History<2>,  Up: Fish

1.2.2.3 Directory tracking
..........................

Extend your prompt to send out an OSC7 sequence to have ‘fish’ send the
current directory and hostname to MisTTY. To do that, you might add the
following to ‘~/.local/config/fish/config.fish’:

     if [ "$TERM" = "eterm-color" ]
       function osc7_send_pwd --on-event fish_prompt
         printf "\e]7;file://%s%s\e\\\\" (hostname) "$PWD"
       end
     end

such sequence are either ignored or understood by most terminals.  You
might already have it set up.


File: mistty.info,  Node: Multi-line prompts<2>,  Next: VI mode<2>,  Prev: Directory tracking<2>,  Up: Fish

1.2.2.4 Multi-line prompts
..........................

‘fish’ automatically detects when a command is incomplete when you type
‘RET’ and launches a multi-line prompt, which MisTTY knows to navigate.

The cursor jumps over indent space while on such a prompt, just like in
a normal terminal.  ‘M-x customize-option mistty-skip-empty-spaces’
allows you to turn that on or off in a MisTTY buffer.


File: mistty.info,  Node: VI mode<2>,  Prev: Multi-line prompts<2>,  Up: Fish

1.2.2.5 VI mode
...............

To communicate with ‘fish’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but in MisTTY, you can add
something like the following in ‘~/.zshrc’:

     if [ "$TERM" != "eterm-color" ]
       fish_vi_key_bindings
     end


File: mistty.info,  Node: Zsh,  Prev: Fish,  Up: Shells

1.2.3 Zsh
---------

* Menu:

* Autosuggestions: Autosuggestions<2>.
* Directory tracking: Directory tracking<3>.
* Multi-line prompts: Multi-line prompts<3>.
* VI mode: VI mode<3>.


File: mistty.info,  Node: Autosuggestions<2>,  Next: Directory tracking<3>,  Up: Zsh

1.2.3.1 Autosuggestions
.......................

Fish-like ‘zsh’ autosuggestions work normally in MisTTY, if you’ve
turned these on.  However, the usual way of accepting an autosuggestion,
pressing the right arrow key, is very inconvenient as this is normally
bound to an Emacs point movement.

The recommended way of accepting an autosuggestion in MisTTY is to type
‘C-e’.  This works in normal terminals as well.


File: mistty.info,  Node: Directory tracking<3>,  Next: Multi-line prompts<3>,  Prev: Autosuggestions<2>,  Up: Zsh

1.2.3.2 Directory tracking
..........................

Extend your prompt to send out an OSC7 sequence to have ‘zsh’ send the
current directory and hostname to MisTTY. To do that, you might add the
following to ‘~/.zshrc’:

     if [ "$TERM" != "eterm-color" ]; then
         PS1='\e]7;file://$HOSTNAME$PWD\e\\\\'$PS1
     fi

such sequence are either ignored or understood by most terminals.


File: mistty.info,  Node: Multi-line prompts<3>,  Next: VI mode<3>,  Prev: Directory tracking<3>,  Up: Zsh

1.2.3.3 Multi-line prompts
..........................

When you press ‘RET’ on an incomplete command, ‘zsh’ has the annoying
habit of starting a secondary prompt.  MisTTY doesn’t know how to go
back to the previous prompt from such a prompt.

To work around that, type ‘S-<return>’ instead of ‘RET’ while on the
terminal zone of a MisTTY buffer.  This sends a newline without running
the command.  You’ll then end up with one multi-line prompt that you can
edit normally.

You’ll get the same effect if you yank a multi-line command while in a
prompt or go up the command history to a previous multi-line command.


File: mistty.info,  Node: VI mode<3>,  Prev: Multi-line prompts<3>,  Up: Zsh

1.2.3.4 VI mode
...............

To communicate with ‘zsh’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but in MisTTY, you can add
something like the following in ‘~/.zshrc’:

     if [ "$TERM" != "eterm-color" ]; then
       bindkey -v
     fi


File: mistty.info,  Node: Writing Extensions,  Next: FAQ,  Prev: Shells,  Up: Contents

1.3 Writing Extensions
======================

* Menu:

* OSC Sequences::
* Writing Your Own Commands::
* Terminal Keymap::


File: mistty.info,  Node: OSC Sequences,  Next: Writing Your Own Commands,  Up: Writing Extensions

1.3.1 OSC Sequences
-------------------

OSC are “operating system command” control sequences.  MisTTY supports
some of these sequences and ignores the others.

By default, the supported sequences are OSC 2 (set window title), 7
(directory tracking, already mentioned in *note Directory tracking and
TRAMP: 13.) and 8 (hyperlinks), thanks to ‘ansi-osc.el’.

To add more, register handlers to ‘mistty-osc-handlers’.  The format is
the same as the handlers supported for ‘ansi-osc-handlers’ and can
usually be used interchangeably.

When working on OSC handlers for MisTTY, it’s important to keep the
following in mind: MisTTY separate buffers for the terminal (a
‘term-mode’ buffer) and for MisTTY itself.  The OSC handlers run in the
term-mode buffer.

One consequence of this is that if you set a buffer-local variable in a
handler, it won’t be available in the MisTTY buffer unless you register
it to ‘M-x configure-option mistty-variables-to-copy’

MisTTY provides helpers for writing OSC handlers that set text
properties:

   - The function ‘mistty-register-text-properties’ registers a set of
     text properties to set on any text written to the terminal until
     ‘mistty-unregister-text-properties’ is called with the same
     argument.


File: mistty.info,  Node: Writing Your Own Commands,  Next: Terminal Keymap,  Prev: OSC Sequences,  Up: Writing Extensions

1.3.2 Writing Your Own Commands
-------------------------------

You might find the following functions useful if you’d like to write
commands that extend MisTTY’s behavior:

   - ‘mistty-send-string’ sends a string to the terminal, unmodified.
     The string that is sent appear only after the function return - and
     it might not ever appear at all depending on the application
     attached to the terminal.  This is used to implement ‘mistty-sudo’
     for example.

   - ‘mistty-on-prompt-p’ returns non-nil if the given position is
     inside of a prompt MisTTY is aware of.  This is useful for writing
     commands that behave differently on a prompt than on program
     output, even while inside of the terminal zone.  It is used to
     implement ‘mistty-beginning-of-line’ for example.

   - ‘mistty-maybe-realize-possible-prompt’ might be useful to call in
     your commands to tell MisTTY that there’s likely a prompt at the
     current pointer position.

   - ‘mistty-before-position’ not only check whether there’s a prompt at
     the position, but also attempt to move the terminal cursor to that
     position.


File: mistty.info,  Node: Terminal Keymap,  Prev: Writing Your Own Commands,  Up: Writing Extensions

1.3.3 Terminal Keymap
---------------------

To forward a key binding to the application attached to the terminal
‘mistty-send-key’ first needs to convert that key binding to something
applications will understand.  The translation is done by
‘mistty-translate-key’.

     The function ‘mistty-translate-key’ takes an Emacs key binding, as
     returned by ‘kbd’ and returns a string containing the sequence of
     characters that correspond to that key to send to the application
     tied to the terminal.

The default terminal keymap used by MisTTY mimics ‘xterm’ key bindings.
You might extend it or change it by changing the map
‘mistty-term-key-map’.

For example, you can change the string that correspond to the first
function keys from their default (”\eOP” - “\eOS”) as follows:

     (define-key mistty-term-key-map (kbd "<f1>") "\e[11~")
     (define-key mistty-term-key-map (kbd "<f2>") "\e[12~")
     (define-key mistty-term-key-map (kbd "<f3>") "\e[13~")
     (define-key mistty-term-key-map (kbd "<f4>") "\e[14~")

‘M-x mistty-reverse-input-decode-map’ generates alternative values for
‘mistty-term-key-map’ for you if you’d like mimic another set of key
bindings than xterm, for example, to generate a keymap that simulates
rxvt, you might do:

     (load-library "term/rxvt.el")
     (mistty-reverse-input-decode-map rxvt-function-map)

‘mistty-reverse-input-decode-map.el’ is not included into the
distribution; it’s only available on github(1).

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/tree/master/extras


File: mistty.info,  Node: FAQ,  Next: Contributing,  Prev: Writing Extensions,  Up: Contents

1.4 FAQ
=======

‘What are all those OCOCOCO or ODODODO that appear on the screen?’

     These are the terminal sequences that MisTTY sends to a program to
     move the cursor left or right.  If you see these printed on the
     terminal, it means that the program that’s currently controlling
     the terminal doesn’t support these.

     In such situation, you can:

        - Only type self-inserting characters and ‘DEL’.

        - Press ‘C-c C-q’ or ‘M-x mistty-send-key-sequence’ to send what
          you type directly to the terminal until you turn it off with
          ‘C-g’.

        - Write a regexp that identifies the situation and add it to
          ‘M-x customize-option mistty-forbid-edit-regexps’.

     See the section *note Terminal vs.  Scrollback: a. for more
     details.

‘Why is the cursor jumping around when I move it?’

     MisTTY jumps over spaces which just “aren’t there”, such as the
     spaces between the command and the right prompt, spaces added by
     ‘fish’ for indentation in multi-line prompts.

     If it doesn’t work with your shell or setup, or if you find it
     confusing, type ‘M-x customize-option mistty-skip-empty-spaces’ to
     turn it off.

‘What’s with the purple line?’

     This line indicates the region of the buffer that works as a
     terminal, meaning that it is not fully editable and that some
     shortcuts, such as ‘TAB’ are sent directly to the program
     controlling the terminal.

     This is covered in depth in the section *note Terminal vs.
     Scrollback: a.

     If you just don’t want to see that line, turn it off with ‘M-x
     customize-option mistty-fring-enabled’


File: mistty.info,  Node: Contributing,  Prev: FAQ,  Up: Contents

1.5 Contributing
================

* Menu:

* Reporting issues::
* Suggesting features::
* Asking questions::
* Code contributions::
* Documentation contributions::


File: mistty.info,  Node: Reporting issues,  Next: Suggesting features,  Up: Contributing

1.5.1 Reporting issues
----------------------

At this time, the most useful thing you can do to help is and useful bug
reports to the Issue Tracker(1)

In your report, please discuss what you wanted to happen as well as what
happened.  Also, please include enough information to reproduce the
issue.  Such as:

   - the name and version of the program you were running - usually a
     shell

   - the version of Emacs you’re running, taken, for example, from ‘M-x
     about-emacs’

   - whether you’re running Emacs in a window environment or a terminal

If you can reproduce reliably, please include the content of the buffer
‘*mistty-log*’ into your report, as follows:

   - Enable logging with ‘M-x mistty-start-log’

   - Reproduce the issue

   - Go to the buffer ‘*mistty-log*’, copy its content and paste it into
     the issue.  The log includes everything that you write to the
     terminal and everything that you get back from the terminal.
     Please make sure you’re not including any private information, such
     as password - remove them if necessary…

If you cannot reproduce reliably,

   - go to ‘M-x customize-option mistty-backlog-size’ to set the backlog
     size to a large value, such as 50

   - use MisTTY normally, until the issue comes back

   - once it has happened again, immediately call ‘M-x
     mistty-start-log’.  The log will then contain entries for events
     that happened just ‘before’ you called the command.

   - copy the content of the ‘*mistty-log*’ buffer, strip out anything
     private, and include it into the issue.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Suggesting features,  Next: Asking questions,  Prev: Reporting issues,  Up: Contributing

1.5.2 Suggesting features
-------------------------

Please add feature suggestions to the Issue Tracker(1).

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Asking questions,  Next: Code contributions,  Prev: Suggesting features,  Up: Contributing

1.5.3 Asking questions
----------------------

Open an issue on the Issue Tracker(1) with your question.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Code contributions,  Next: Documentation contributions,  Prev: Asking questions,  Up: Contributing

1.5.4 Code contributions
------------------------

To contribute code to the project, open a Pull Request(1).

Before you do that, please make sure the any new features is covered by
tests and that the tests pass.

To run the tests, install and setup eldev(2) then run ‘eldev test’.

Tests can also be run from inside of Emacs, using ‘M-x
ert-run-tests-interactively’ but when you do so, be aware that there
might be unexpected interaction with your Emacs configurations.  The
tests passing reliably when run using ‘eldev test’ is what matters.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/emacs-bash-completion/pulls

   (2) https://github.com/emacs-eldev/eldev


File: mistty.info,  Node: Documentation contributions,  Prev: Code contributions,  Up: Contributing

1.5.5 Documentation contributions
---------------------------------

You don’t need to be a developer to contribute!  Contribution to the
documentation or code comments are very welcome.  Please open a Pull
Request(1) with your proposed modifications.

The documentation is written in reStructuredText.  You’ll need to
install Sphinx(2) to build it:

     pip install sphinx sphinx-rtd-theme

Then run ‘eldev html’ to build the documentation.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/emacs-bash-completion/pulls

   (2) https://www.sphinx-doc.org


File: mistty.info,  Node: Index,  Prev: Contents,  Up: Top

Index
*****

 [index ]
* Menu:

* environment variable; ESHELL:          Launching.            (line 15)
* environment variable; SHELL:           Launching.            (line 16)
* ESHELL:                                Launching.            (line 15)
* SHELL:                                 Launching.            (line 16)



Tag Table:
Node: Top334
Ref: index doc511
Ref: 0511
Node: Contents2802
Ref: index contents2876
Ref: 22876
Ref: index mistty2876
Ref: 32876
Node: Usage2978
Ref: usage doc3043
Ref: 43043
Ref: usage usage3043
Ref: 53043
Node: Installation3264
Ref: usage id13336
Ref: 63336
Ref: usage installation3336
Ref: 73336
Node: Launching4408
Ref: usage id24511
Ref: 94511
Ref: usage launching4511
Ref: 84511
Node: Terminal vs Scrollback5594
Ref: usage term-vs-scroll5715
Ref: a5715
Ref: usage terminal-vs-scrollback5715
Ref: b5715
Node: Navigating the scrollback zone10116
Ref: usage navigating-the-scrollback-zone10243
Ref: d10243
Ref: usage navigation10243
Ref: e10243
Node: Fullscreen Mode11597
Ref: usage fullscreen11717
Ref: 111717
Ref: usage fullscreen-mode11717
Ref: 1011717
Node: Command History12313
Ref: usage command-history12431
Ref: 1112431
Ref: usage history12431
Ref: f12431
Node: Directory tracking and TRAMP13243
Ref: usage directory-tracking-and-tramp13337
Ref: 1213337
Ref: usage dirtrack13337
Ref: 1313337
Node: Shells13997
Ref: shells doc14089
Ref: 1414089
Ref: shells id114089
Ref: 1514089
Ref: shells shells14089
Ref: c14089
Node: Bash14148
Ref: shells bash14208
Ref: 1614208
Ref: shells id214208
Ref: 1714208
Node: Multi-line prompts14299
Ref: shells multi-line-prompts14385
Ref: 1814385
Node: Directory tracking15024
Ref: shells directory-tracking15126
Ref: 1915126
Node: VI mode15843
Ref: shells vi-mode15918
Ref: 1a15918
Node: Fish16485
Ref: shells fish16557
Ref: 1b16557
Ref: shells id316557
Ref: 1c16557
Node: Autosuggestions16762
Ref: shells autosuggestions16845
Ref: 1d16845
Node: Command History<2>17223
Ref: shells command-history17336
Ref: 1e17336
Node: Directory tracking<2>18332
Ref: shells id418451
Ref: 1f18451
Node: Multi-line prompts<2>18979
Ref: shells id519090
Ref: 2019090
Node: VI mode<2>19497
Ref: shells id619578
Ref: 2119578
Node: Zsh20019
Ref: shells id720078
Ref: 2220078
Ref: shells zsh20078
Ref: 2320078
Node: Autosuggestions<2>20261
Ref: shells id820349
Ref: 2420349
Node: Directory tracking<3>20775
Ref: shells id920893
Ref: 2520893
Node: Multi-line prompts<3>21295
Ref: shells id1021405
Ref: 2621405
Node: VI mode<3>22042
Ref: shells id1122122
Ref: 2722122
Node: Writing Extensions22557
Ref: extensions doc22647
Ref: 2822647
Ref: extensions writing-extensions22647
Ref: 2922647
Node: OSC Sequences22772
Ref: extensions osc22874
Ref: 2a22874
Ref: extensions osc-sequences22874
Ref: 2b22874
Node: Writing Your Own Commands24160
Ref: extensions custom-commands24286
Ref: 2c24286
Ref: extensions writing-your-own-commands24286
Ref: 2d24286
Node: Terminal Keymap25456
Ref: extensions term-keymap25560
Ref: 2e25560
Ref: extensions terminal-keymap25560
Ref: 2f25560
Ref: Terminal Keymap-Footnote-127111
Node: FAQ27173
Ref: faq doc27269
Ref: 3027269
Ref: faq faq27269
Ref: 3127269
Node: Contributing28996
Ref: contrib doc29065
Ref: 3229065
Ref: contrib contributing29065
Ref: 3329065
Node: Reporting issues29231
Ref: contrib reporting-issues29324
Ref: 3429324
Ref: Reporting issues-Footnote-130978
Node: Suggesting features31028
Ref: contrib issue-tracker31146
Ref: 3531146
Ref: contrib suggesting-features31146
Ref: 3631146
Ref: Suggesting features-Footnote-131292
Node: Asking questions31342
Ref: contrib asking-questions31462
Ref: 3731462
Ref: Asking questions-Footnote-131604
Node: Code contributions31654
Ref: contrib code-contributions31782
Ref: 3831782
Ref: Code contributions-Footnote-132376
Ref: Code contributions-Footnote-232440
Node: Documentation contributions32485
Ref: contrib documentation-contributions32588
Ref: 3932588
Ref: contrib eldev32588
Ref: 3a32588
Ref: Documentation contributions-Footnote-133076
Ref: Documentation contributions-Footnote-233140
Node: Index33175

End Tag Table


Local Variables:
coding: utf-8
End:
